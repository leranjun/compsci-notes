{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IB CompSci Notes \u00b6 Java Notes SL & HL Units 01 Computational Thinking 02 Problem-Solving & Java 02a Main 02b Project 03 System and Computer Organisation 03a User Focus 03b OS & Application Systems 03c Number Bases & Conversions 04 Object-Oriented Programming 05 Searching & Sorting Algorithms HL Only Units 01 Problem-Solving & Data Structures 1 02 Control Systems 03 Abstract Data Structures 04 Resource Management","title":"IB CompSci Notes"},{"location":"#ib-compsci-notes","text":"Java Notes SL & HL Units 01 Computational Thinking 02 Problem-Solving & Java 02a Main 02b Project 03 System and Computer Organisation 03a User Focus 03b OS & Application Systems 03c Number Bases & Conversions 04 Object-Oriented Programming 05 Searching & Sorting Algorithms HL Only Units 01 Problem-Solving & Data Structures 1 02 Control Systems 03 Abstract Data Structures 04 Resource Management","title":"IB CompSci Notes"},{"location":"java/","text":"Java Notes \u00b6 Boilerplate \u00b6 Attention The class name must be identical to the file name. public class className { public static void main ( String [] args ) { // Some code } } Output \u00b6 // Print with newline System . out . println ( \"Hello World!\" ); // Print without newline System . out . print ( \"Hello \" ); System . out . print ( \"World!\\n\" ); Input \u00b6 import java.util.Scanner ; // in main Scanner sc = new Scanner ( System . in ); String input = sc . nextLine (); Be careful: nextInt() does not read a newline character, so if nextLine() is used directly after, it will only read a newline character. See this SO answer . int a = sc . nextInt (); sc . nextLine (); String b = sc . nextLine (); File handling \u00b6 import java.io.* ; import java.util.Scanner ; // in main // Read from file try { File file = new File ( \"filename.txt\" ); Scanner sc = new Scanner ( file ); while ( sc . hasNextLine ()) { String line = sc . nextLine (); // Do something with line } sc . close (); } catch ( FileNotFoundException e ) { System . out . println ( \"An error occurred.\" ); } // Write to file try { FileWriter file = new FileWriter ( \"filename.txt\" ); file . write ( \"Hello World!\" ); // Write with new line file . write ( \"Hello World!\" + System . lineSeparator ()); file . close (); } catch ( IOException e ) { System . out . println ( \"An error occurred.\" ); } Math \u00b6 Note Math is from java.lang.Math , which is imported by default. Min/Max \u00b6 int min = Math . min ( a , b ); int max = Math . max ( a , b ); Random \u00b6 // This gives a random number in the range of [min, max) int rand = min + ( int )( Math . random () * ( max - min )); Array \u00b6 See HL01 . ArrayList \u00b6 The equivalent of vector in C++ (a dynamic array). Attention ArrayList cannot accept primitive types (e.g. int , double ), so a class must be used instead (e.g. Integer , Double ). import java.util.ArrayList ; // in main ArrayList < Integer > arr = new ArrayList < Integer > (); // 2D ArrayList ArrayList < ArrayList < Integer >> arr = new ArrayList < ArrayList < Integer >> (); // alternatively, use the diamond operator ArrayList < ArrayList < Integer >> arr = new ArrayList <> (); ArrayList methods \u00b6 // Add to end arr . add ( element ); // Insert at index arr . add ( index , element ); // Replace at index arr . set ( index , element ); // Get element int a = arr . get ( index ); // Remove element arr . remove ( index ); arr . remove ( element ); // Get size int size = arr . size (); // Clear arr . clear (); // Check if empty boolean empty = arr . isEmpty (); // Check if contains element boolean contains = arr . contains ( element ); // Get index int index = arr . indexOf ( element ); // To array Integer [] arr2 = arr . toArray ( new Integer [ arr . size () ] ); // Collections methods import java.util.Collections ; // Sort Collections . sort ( arr ); // Sort in reverse Collections . sort ( arr , Collections . reverseOrder ()); // Sort with custom comparator Collections . sort ( arr , new Comparator < Integer > () { @Override public int compare ( Integer a , Integer b ) { return a - b ; } }); // Reverse Collections . reverse ( arr ); // Shuffle Collections . shuffle ( arr ); // Swap Collections . swap ( arr , i , j ); // Rotate Collections . rotate ( arr , distance ); // Fill Collections . fill ( arr , element ); // Replace all Collections . replaceAll ( arr , oldElement , newElement ); // Frequency int freq = Collections . frequency ( arr , element ); // Max int max = Collections . max ( arr ); // Min int min = Collections . min ( arr ); // Binary search int index = Collections . binarySearch ( arr , element ); // Add all Collections . addAll ( arr , element1 , element2 , ...);","title":"Java Notes"},{"location":"java/#java-notes","text":"","title":"Java Notes"},{"location":"java/#boilerplate","text":"Attention The class name must be identical to the file name. public class className { public static void main ( String [] args ) { // Some code } }","title":"Boilerplate"},{"location":"java/#output","text":"// Print with newline System . out . println ( \"Hello World!\" ); // Print without newline System . out . print ( \"Hello \" ); System . out . print ( \"World!\\n\" );","title":"Output"},{"location":"java/#input","text":"import java.util.Scanner ; // in main Scanner sc = new Scanner ( System . in ); String input = sc . nextLine (); Be careful: nextInt() does not read a newline character, so if nextLine() is used directly after, it will only read a newline character. See this SO answer . int a = sc . nextInt (); sc . nextLine (); String b = sc . nextLine ();","title":"Input"},{"location":"java/#file-handling","text":"import java.io.* ; import java.util.Scanner ; // in main // Read from file try { File file = new File ( \"filename.txt\" ); Scanner sc = new Scanner ( file ); while ( sc . hasNextLine ()) { String line = sc . nextLine (); // Do something with line } sc . close (); } catch ( FileNotFoundException e ) { System . out . println ( \"An error occurred.\" ); } // Write to file try { FileWriter file = new FileWriter ( \"filename.txt\" ); file . write ( \"Hello World!\" ); // Write with new line file . write ( \"Hello World!\" + System . lineSeparator ()); file . close (); } catch ( IOException e ) { System . out . println ( \"An error occurred.\" ); }","title":"File handling"},{"location":"java/#math","text":"Note Math is from java.lang.Math , which is imported by default.","title":"Math"},{"location":"java/#minmax","text":"int min = Math . min ( a , b ); int max = Math . max ( a , b );","title":"Min/Max"},{"location":"java/#random","text":"// This gives a random number in the range of [min, max) int rand = min + ( int )( Math . random () * ( max - min ));","title":"Random"},{"location":"java/#array","text":"See HL01 .","title":"Array"},{"location":"java/#arraylist","text":"The equivalent of vector in C++ (a dynamic array). Attention ArrayList cannot accept primitive types (e.g. int , double ), so a class must be used instead (e.g. Integer , Double ). import java.util.ArrayList ; // in main ArrayList < Integer > arr = new ArrayList < Integer > (); // 2D ArrayList ArrayList < ArrayList < Integer >> arr = new ArrayList < ArrayList < Integer >> (); // alternatively, use the diamond operator ArrayList < ArrayList < Integer >> arr = new ArrayList <> ();","title":"ArrayList"},{"location":"java/#arraylist-methods","text":"// Add to end arr . add ( element ); // Insert at index arr . add ( index , element ); // Replace at index arr . set ( index , element ); // Get element int a = arr . get ( index ); // Remove element arr . remove ( index ); arr . remove ( element ); // Get size int size = arr . size (); // Clear arr . clear (); // Check if empty boolean empty = arr . isEmpty (); // Check if contains element boolean contains = arr . contains ( element ); // Get index int index = arr . indexOf ( element ); // To array Integer [] arr2 = arr . toArray ( new Integer [ arr . size () ] ); // Collections methods import java.util.Collections ; // Sort Collections . sort ( arr ); // Sort in reverse Collections . sort ( arr , Collections . reverseOrder ()); // Sort with custom comparator Collections . sort ( arr , new Comparator < Integer > () { @Override public int compare ( Integer a , Integer b ) { return a - b ; } }); // Reverse Collections . reverse ( arr ); // Shuffle Collections . shuffle ( arr ); // Swap Collections . swap ( arr , i , j ); // Rotate Collections . rotate ( arr , distance ); // Fill Collections . fill ( arr , element ); // Replace all Collections . replaceAll ( arr , oldElement , newElement ); // Frequency int freq = Collections . frequency ( arr , element ); // Max int max = Collections . max ( arr ); // Min int min = Collections . min ( arr ); // Binary search int index = Collections . binarySearch ( arr , element ); // Add all Collections . addAll ( arr , element1 , element2 , ...);","title":"ArrayList methods"},{"location":"HL/","text":"HL Units Index \u00b6 01 Problem-Solving & Data Structures 1 02 Control Systems 03 Abstract Data Structures 04 Resource Management","title":"HL Units Index"},{"location":"HL/#hl-units-index","text":"01 Problem-Solving & Data Structures 1 02 Control Systems 03 Abstract Data Structures 04 Resource Management","title":"HL Units Index"},{"location":"HL/01/","text":"01 Problem-Solving & Data Structures 1 \u00b6 1D Arrays \u00b6 An array is a fixed-size variable to store one or more values of a given data type. Attention Arrays usually use 0-based indexing. /* Can separate into 2 lines: <type>[] <name>; OR <type> <name>[]; <name> = new <type>[<size>]; */ int [] arr ; arr = new int [ 5 ] ; /* Or can combine into one line: <type>[] <name> = new <type>[<size>]; */ int [] arr = new int [ 5 ] ; /* Or use an initializer list: <type>[] <name> = {<value1>, <value2>, ..., <valueN>}; */ int [] arr = { 1 , 2 , 3 , 4 , 5 }; for ( int i = 0 ; i < arr . length ; i ++ ) { System . out . println ( arr [ i ] ); } 2D Arrays \u00b6 A 2D array is an array of 1D arrays. /* <type>[][] <name> = new <type>[<size>][<size>]; */ int [][] arr = new int [ 5 ][ 5 ] ; /* Or use an initializer list: <type>[][] <name> = {{<value1>, <value2>, ..., <valueN>}, {<value1>, <value2>, ..., <valueN>}, ..., {<value1>, <value2>, ..., <valueN>}}; */ int [][] arr = {{ 1 , 2 , 3 , 4 , 5 }, { 1 , 2 , 3 , 4 , 5 }, { 1 , 2 , 3 , 4 , 5 }, { 1 , 2 , 3 , 4 , 5 }, { 1 , 2 , 3 , 4 , 5 }}; for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 0 ; j < arr [ i ] . length ; j ++ ) { System . out . println ( arr [ i ][ j ] ); } }","title":"01 Problem-Solving & Data Structures 1"},{"location":"HL/01/#01-problem-solving-data-structures-1","text":"","title":"01 Problem-Solving &amp; Data Structures 1"},{"location":"HL/01/#1d-arrays","text":"An array is a fixed-size variable to store one or more values of a given data type. Attention Arrays usually use 0-based indexing. /* Can separate into 2 lines: <type>[] <name>; OR <type> <name>[]; <name> = new <type>[<size>]; */ int [] arr ; arr = new int [ 5 ] ; /* Or can combine into one line: <type>[] <name> = new <type>[<size>]; */ int [] arr = new int [ 5 ] ; /* Or use an initializer list: <type>[] <name> = {<value1>, <value2>, ..., <valueN>}; */ int [] arr = { 1 , 2 , 3 , 4 , 5 }; for ( int i = 0 ; i < arr . length ; i ++ ) { System . out . println ( arr [ i ] ); }","title":"1D Arrays"},{"location":"HL/01/#2d-arrays","text":"A 2D array is an array of 1D arrays. /* <type>[][] <name> = new <type>[<size>][<size>]; */ int [][] arr = new int [ 5 ][ 5 ] ; /* Or use an initializer list: <type>[][] <name> = {{<value1>, <value2>, ..., <valueN>}, {<value1>, <value2>, ..., <valueN>}, ..., {<value1>, <value2>, ..., <valueN>}}; */ int [][] arr = {{ 1 , 2 , 3 , 4 , 5 }, { 1 , 2 , 3 , 4 , 5 }, { 1 , 2 , 3 , 4 , 5 }, { 1 , 2 , 3 , 4 , 5 }, { 1 , 2 , 3 , 4 , 5 }}; for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 0 ; j < arr [ i ] . length ; j ++ ) { System . out . println ( arr [ i ][ j ] ); } }","title":"2D Arrays"},{"location":"HL/02/","text":"02 Control Systems \u00b6 Control system \u00b6 A control system is a type of computer system that manages and directs other devices or systems. Control systems take an input, process this according to the rules of the system and cause an output, often using a motor or other actuator. Measurement of the process variable (input) Evaluation and comparison with the desired level (processing) Control of the required level of the parameter involved (output) Key elements \u00b6 Transducer \u00b6 A transducer is a device that converts signals in one form of energy into another (e.g. microphone - sound waves into electrical signals). Input physical, output electrical: sensor (+ ADC) Input electrical, output physical: actuator (+ DAC) Sensor \u00b6 A sensor is an input device that continuously takes readings of the environment. Analogue-to-digital converter (ADC) \u00b6 An ADC is a device that converts an analogue (continuous) signal into a digital (discrete, binary) signal. Collecting data: sampling Converting data to e.g. binary: quantisation Microprocessor \u00b6 A microprocessor compares the input converted by the ADC to pre-defined/stored/preset values. Digital-to-analogue converter (DAC) \u00b6 A DAC is a device that converts a digital signal into an analogue signal for an actuator. Actuator \u00b6 An actuator is an output device that executes a physical action (e.g. fan, motor, pump, light) ( actua lly does something). Benefits and limitations \u00b6 Benefits \u00b6 Consistency and accuracy in the positioning of moving parts of an equipment The more economic use of existing plants (by saving fuel/and or electrical energy) The release of skilled personnel for other productive work Reduction of physical effort with consequent reduction of fatigue and boredom Improved working conditions Limitations \u00b6 The initial cost is high Power fluctuations (causing unpredictable results) Lack of skilled personnel to monitor and maintain specialist equipment Social impact \u00b6 Loss of job (replaced by automated processes, robots, etc) Migration (need to move/travel further for employment) More free time (quality of life) Economic impact \u00b6 Improved profitability (reduced cost per unit) Improved, skilled workforce (creating an economic hub for other businesses to develop) Unfair advantages against less-developed nations Environmental impact \u00b6 Need for more raw materials (contributing to climate change) Increase in physical digital waste (disposal problems) Legal impact \u00b6 New technology/systems bring new legislation Laws in one country may be different to another Examples of control systems \u00b6 See this doc . Open- and closed-loop systems \u00b6 Open-loop system \u00b6 An open-loop system only repeats a task given a set input. graph LR A[Input] --> B[Processing] B --> C[Output] e.g. for a microwave: graph LR A[Time period] --> B[Heating] B --> C[Temperature of food] Closed-loop system \u00b6 A closed-loop system can take into account the output of the system and adjust the input accordingly. graph LR A[Desired output/setpoint/reference] --> B[Error] B --> C[Controller] C --> D[Actuator] D --> E[Plant] E --> F[Output] E --> G[Sensor] G --> B The target is to minimise the error (difference between the desired output and the actual output). Disturbance: unwanted variation in the system (e.g. from the environment - icy roads in a car) Noise: measurement error from the technology used in the sensor","title":"02 Control Systems"},{"location":"HL/02/#02-control-systems","text":"","title":"02 Control Systems"},{"location":"HL/02/#control-system","text":"A control system is a type of computer system that manages and directs other devices or systems. Control systems take an input, process this according to the rules of the system and cause an output, often using a motor or other actuator. Measurement of the process variable (input) Evaluation and comparison with the desired level (processing) Control of the required level of the parameter involved (output)","title":"Control system"},{"location":"HL/02/#key-elements","text":"","title":"Key elements"},{"location":"HL/02/#transducer","text":"A transducer is a device that converts signals in one form of energy into another (e.g. microphone - sound waves into electrical signals). Input physical, output electrical: sensor (+ ADC) Input electrical, output physical: actuator (+ DAC)","title":"Transducer"},{"location":"HL/02/#sensor","text":"A sensor is an input device that continuously takes readings of the environment.","title":"Sensor"},{"location":"HL/02/#analogue-to-digital-converter-adc","text":"An ADC is a device that converts an analogue (continuous) signal into a digital (discrete, binary) signal. Collecting data: sampling Converting data to e.g. binary: quantisation","title":"Analogue-to-digital converter (ADC)"},{"location":"HL/02/#microprocessor","text":"A microprocessor compares the input converted by the ADC to pre-defined/stored/preset values.","title":"Microprocessor"},{"location":"HL/02/#digital-to-analogue-converter-dac","text":"A DAC is a device that converts a digital signal into an analogue signal for an actuator.","title":"Digital-to-analogue converter (DAC)"},{"location":"HL/02/#actuator","text":"An actuator is an output device that executes a physical action (e.g. fan, motor, pump, light) ( actua lly does something).","title":"Actuator"},{"location":"HL/02/#benefits-and-limitations","text":"","title":"Benefits and limitations"},{"location":"HL/02/#benefits","text":"Consistency and accuracy in the positioning of moving parts of an equipment The more economic use of existing plants (by saving fuel/and or electrical energy) The release of skilled personnel for other productive work Reduction of physical effort with consequent reduction of fatigue and boredom Improved working conditions","title":"Benefits"},{"location":"HL/02/#limitations","text":"The initial cost is high Power fluctuations (causing unpredictable results) Lack of skilled personnel to monitor and maintain specialist equipment","title":"Limitations"},{"location":"HL/02/#social-impact","text":"Loss of job (replaced by automated processes, robots, etc) Migration (need to move/travel further for employment) More free time (quality of life)","title":"Social impact"},{"location":"HL/02/#economic-impact","text":"Improved profitability (reduced cost per unit) Improved, skilled workforce (creating an economic hub for other businesses to develop) Unfair advantages against less-developed nations","title":"Economic impact"},{"location":"HL/02/#environmental-impact","text":"Need for more raw materials (contributing to climate change) Increase in physical digital waste (disposal problems)","title":"Environmental impact"},{"location":"HL/02/#legal-impact","text":"New technology/systems bring new legislation Laws in one country may be different to another","title":"Legal impact"},{"location":"HL/02/#examples-of-control-systems","text":"See this doc .","title":"Examples of control systems"},{"location":"HL/02/#open-and-closed-loop-systems","text":"","title":"Open- and closed-loop systems"},{"location":"HL/02/#open-loop-system","text":"An open-loop system only repeats a task given a set input. graph LR A[Input] --> B[Processing] B --> C[Output] e.g. for a microwave: graph LR A[Time period] --> B[Heating] B --> C[Temperature of food]","title":"Open-loop system"},{"location":"HL/02/#closed-loop-system","text":"A closed-loop system can take into account the output of the system and adjust the input accordingly. graph LR A[Desired output/setpoint/reference] --> B[Error] B --> C[Controller] C --> D[Actuator] D --> E[Plant] E --> F[Output] E --> G[Sensor] G --> B The target is to minimise the error (difference between the desired output and the actual output). Disturbance: unwanted variation in the system (e.g. from the environment - icy roads in a car) Noise: measurement error from the technology used in the sensor","title":"Closed-loop system"},{"location":"SLHL/","text":"SLHL Units Index \u00b6 01 Computational Thinking 02 Problem-Solving & Java 02a Main 02b Project 03 System and Computer Organisation 03a User Focus 03b OS & Application Systems 03c Number Bases & Conversions 04 Object-Oriented Programming 05 Searching & Sorting Algorithms","title":"SLHL Units Index"},{"location":"SLHL/#slhl-units-index","text":"01 Computational Thinking 02 Problem-Solving & Java 02a Main 02b Project 03 System and Computer Organisation 03a User Focus 03b OS & Application Systems 03c Number Bases & Conversions 04 Object-Oriented Programming 05 Searching & Sorting Algorithms","title":"SLHL Units Index"},{"location":"SLHL/01/","text":"01 Computational Thinking \u00b6 Summary Decomposition : break the problem down into its components & identify subproblems that need to be solved Pattern Recognition : recognise patterns between subproblems Abstraction/Pattern Generalisation : set up operations that can be used for the subproblems Algorithm Design : solve parallel & sequential subproblems Decomposition \u00b6 Breaking down a complex problem/system -> smaller, more manageable, easier\u2013to-understand parts Then examine/solve/design individually \u201cDivide and conquer\u201d Benefits \u00b6 Simpler to work with, easier to solve Deal with one at a time only Can straightforwardly understand each part before understanding the whole problem Different people can work on different parts at the same time Reduce development time Components can be reused in other programs Examples \u00b6 Brushing teeth which toothbrush to use how long to brush for how hard to press on our teeth what toothpaste to use Solving crime what crime was committed when the crime was committed where the crime was committed what evidence there is if there were any witnesses if there have recently been any similar crimes Creating app what kind of app do you want to create what your app will look like who is the target audience for your app what your graphics will look like what audio you will include what software you will use to build your app how the user will navigate your app how you will test your app where you will sell your app Pattern Recognition \u00b6 Finding patterns (similarity/common characteristics) among small, decomposed problems Benefits \u00b6 Use the same problem-solving solution for the same pattern Easier & quicker Solve more complex problems more efficiently Solve the problem correctly (because generalisations have been identified) Examples \u00b6 There might even be patterns within a problem, e.g. for each ingredient, we need its name and a specific measurement. Abstraction \u00b6 Filtering out/ignoring/taking away unnecessary characteristics/details to concentrate on necessary/essential ones Creating a model (an easier-to-understand version/general idea of a complex system) Tip A single abstraction can represent a whole class of similar things (e.g. for any bus route, we need the bus number, start/end time and bus stops to get on/off). This can be done through successive decomposition and by keeping general patterns and removing specific details . Benefits \u00b6 Can be viewed both as a process and as an entity (???) Enables concentration on essential aspects -> ignore distracting details Focus on the right solution to a problem Technique for managing complexity Examples \u00b6 An MRT map is an abstraction of the geographically accurate map, but it contains enough information for us to navigate the MRT system. In computer programming this can be: Algorithm Design \u00b6 A plan or a set of step-by-step instructions to solve a problem Each instruction is identified The order in which they should be carried out is planned A starting point for computer programs Represented using pseudocode or flowchart Examples \u00b6 In GCSE-style pseudocode: OUTPUT \"What is your name?\" INPUT name OUTPUT \"Hello\", name OUTPUT \"How old are you?\" INPUT age IF age >= 70 THEN OUTPUT \"You are aged to perfection!\" ELSE OUTPUT \"You are a spring chicken!\" In flowchart:","title":"01 Computational Thinking"},{"location":"SLHL/01/#01-computational-thinking","text":"Summary Decomposition : break the problem down into its components & identify subproblems that need to be solved Pattern Recognition : recognise patterns between subproblems Abstraction/Pattern Generalisation : set up operations that can be used for the subproblems Algorithm Design : solve parallel & sequential subproblems","title":"01 Computational Thinking"},{"location":"SLHL/01/#decomposition","text":"Breaking down a complex problem/system -> smaller, more manageable, easier\u2013to-understand parts Then examine/solve/design individually \u201cDivide and conquer\u201d","title":"Decomposition"},{"location":"SLHL/01/#decomposition-benefits","text":"Simpler to work with, easier to solve Deal with one at a time only Can straightforwardly understand each part before understanding the whole problem Different people can work on different parts at the same time Reduce development time Components can be reused in other programs","title":"Benefits"},{"location":"SLHL/01/#decomposition-examples","text":"Brushing teeth which toothbrush to use how long to brush for how hard to press on our teeth what toothpaste to use Solving crime what crime was committed when the crime was committed where the crime was committed what evidence there is if there were any witnesses if there have recently been any similar crimes Creating app what kind of app do you want to create what your app will look like who is the target audience for your app what your graphics will look like what audio you will include what software you will use to build your app how the user will navigate your app how you will test your app where you will sell your app","title":"Examples"},{"location":"SLHL/01/#pattern-recognition","text":"Finding patterns (similarity/common characteristics) among small, decomposed problems","title":"Pattern Recognition"},{"location":"SLHL/01/#pattern-recognition-benefits","text":"Use the same problem-solving solution for the same pattern Easier & quicker Solve more complex problems more efficiently Solve the problem correctly (because generalisations have been identified)","title":"Benefits"},{"location":"SLHL/01/#pattern-recognition-examples","text":"There might even be patterns within a problem, e.g. for each ingredient, we need its name and a specific measurement.","title":"Examples"},{"location":"SLHL/01/#abstraction","text":"Filtering out/ignoring/taking away unnecessary characteristics/details to concentrate on necessary/essential ones Creating a model (an easier-to-understand version/general idea of a complex system) Tip A single abstraction can represent a whole class of similar things (e.g. for any bus route, we need the bus number, start/end time and bus stops to get on/off). This can be done through successive decomposition and by keeping general patterns and removing specific details .","title":"Abstraction"},{"location":"SLHL/01/#abstraction-benefits","text":"Can be viewed both as a process and as an entity (???) Enables concentration on essential aspects -> ignore distracting details Focus on the right solution to a problem Technique for managing complexity","title":"Benefits"},{"location":"SLHL/01/#abstraction-examples","text":"An MRT map is an abstraction of the geographically accurate map, but it contains enough information for us to navigate the MRT system. In computer programming this can be:","title":"Examples"},{"location":"SLHL/01/#algorithm-design","text":"A plan or a set of step-by-step instructions to solve a problem Each instruction is identified The order in which they should be carried out is planned A starting point for computer programs Represented using pseudocode or flowchart","title":"Algorithm Design"},{"location":"SLHL/01/#algorithm-design-examples","text":"In GCSE-style pseudocode: OUTPUT \"What is your name?\" INPUT name OUTPUT \"Hello\", name OUTPUT \"How old are you?\" INPUT age IF age >= 70 THEN OUTPUT \"You are aged to perfection!\" ELSE OUTPUT \"You are a spring chicken!\" In flowchart:","title":"Examples"},{"location":"SLHL/02a/","text":"02a Problem-Solving & Java (Main) \u00b6 Thinking Procedurally \u00b6 Development phases \u00b6 Identification: identify the problem, understand the problem, formulate the problem Development: explore various alternatives Selection: choose the best alternative Implementation: implement the selected solution Procedure \u00b6 A subroutine that carries out a set of instructions. Sub procedure showProduct(x, y, z) Output \"The product of\", x, y, z, \"is\", x * y * z End sub Call showProduct(5, 10, 15) Benefits \u00b6 Note The main benefit is to prevent repetition . Can be used across multiple problems, not just within Updates ripple through (only need to change one place instead of finding all the occurrences of a code snippet) Well-tested & reliable Speeds up development (no need to write out the same code every time) Abstraction (not concerned with implementation, just purpose) Function \u00b6 A subroutine that carries out a set of instructions and returns a value to the part of the program that called it. Attention Must return a value! Sub function calcProduct(x, y, z) ans = x * y * z return ans End sub prod = Call calcProduct(5, 10, 15) // the return value gets stored in the variable prod Output prod Thinking Logically \u00b6 Iteration \u00b6 Counted loop: FOR ... TO ... (STEP ...) NEXT Pre-condition loop: WHILE ... DO ... ENDWHILE Post-condition loop: REPEAT ... UNTIL Selection \u00b6 IF ... THEN ... ENDIF IF ... THEN ... ELSE ... ENDIF IF ... THEN ... ELSE IF ... THEN ... ELSE ... ENDIF SWITCH ... CASE ... ELSE ... ENDSWITCH Boolean algebra \u00b6 AND ( && ): true if both operands are true OR ( || ): true if either operand is true NOT ( ! ): true if the operand is false XOR ( ^ ): true if one operand is true and the other is false NAND ( && then ! ): true if both operands are false NOR ( || then ! ): true if both operands are false Thinking Ahead \u00b6 Pre-condition and post-condition comments are useful for documenting the purpose of a subroutine. // Pre: A positive number x is passed to the function // Post: Calculates and returns the square root of x Sub function sqrt(x) ans = x ^ 0.5 return ans End sub","title":"02a Problem-Solving & Java (Main)"},{"location":"SLHL/02a/#02a-problem-solving-java-main","text":"","title":"02a Problem-Solving &amp; Java (Main)"},{"location":"SLHL/02a/#thinking-procedurally","text":"","title":"Thinking Procedurally"},{"location":"SLHL/02a/#development-phases","text":"Identification: identify the problem, understand the problem, formulate the problem Development: explore various alternatives Selection: choose the best alternative Implementation: implement the selected solution","title":"Development phases"},{"location":"SLHL/02a/#procedure","text":"A subroutine that carries out a set of instructions. Sub procedure showProduct(x, y, z) Output \"The product of\", x, y, z, \"is\", x * y * z End sub Call showProduct(5, 10, 15)","title":"Procedure"},{"location":"SLHL/02a/#benefits","text":"Note The main benefit is to prevent repetition . Can be used across multiple problems, not just within Updates ripple through (only need to change one place instead of finding all the occurrences of a code snippet) Well-tested & reliable Speeds up development (no need to write out the same code every time) Abstraction (not concerned with implementation, just purpose)","title":"Benefits"},{"location":"SLHL/02a/#function","text":"A subroutine that carries out a set of instructions and returns a value to the part of the program that called it. Attention Must return a value! Sub function calcProduct(x, y, z) ans = x * y * z return ans End sub prod = Call calcProduct(5, 10, 15) // the return value gets stored in the variable prod Output prod","title":"Function"},{"location":"SLHL/02a/#thinking-logically","text":"","title":"Thinking Logically"},{"location":"SLHL/02a/#iteration","text":"Counted loop: FOR ... TO ... (STEP ...) NEXT Pre-condition loop: WHILE ... DO ... ENDWHILE Post-condition loop: REPEAT ... UNTIL","title":"Iteration"},{"location":"SLHL/02a/#selection","text":"IF ... THEN ... ENDIF IF ... THEN ... ELSE ... ENDIF IF ... THEN ... ELSE IF ... THEN ... ELSE ... ENDIF SWITCH ... CASE ... ELSE ... ENDSWITCH","title":"Selection"},{"location":"SLHL/02a/#boolean-algebra","text":"AND ( && ): true if both operands are true OR ( || ): true if either operand is true NOT ( ! ): true if the operand is false XOR ( ^ ): true if one operand is true and the other is false NAND ( && then ! ): true if both operands are false NOR ( || then ! ): true if both operands are false","title":"Boolean algebra"},{"location":"SLHL/02a/#thinking-ahead","text":"Pre-condition and post-condition comments are useful for documenting the purpose of a subroutine. // Pre: A positive number x is passed to the function // Post: Calculates and returns the square root of x Sub function sqrt(x) ans = x ^ 0.5 return ans End sub","title":"Thinking Ahead"},{"location":"SLHL/03a/","text":"03a User Focus \u00b6 User documentation is any document that explains how to use the features and functions of a system to its end-users. End-user documentation \u00b6 End-user documentation refers to the documentation for a product or service provided to the end users. The end-user documentation is designed to assist end users to use the product or service. This is often referred to as user assistance. The end-user documentation is a part of the overall product delivered to the customer. Attention The end-user documentation does not involve detailed explanations of how the system works - the users only need to know how to use the system. These guides need to be precise and easy to understand. In addition, well-written end-user documentation will help provide the best user experience. The quality of the user documentation can greatly affect the rate of implementation of (how fast users start using) the new system. Importance of end-user documentation \u00b6 Users can learn: how to use your software features of your software tips and tricks for your software how to resolve common problems with your software Without detailed, simple, clear instructions, users might be unaware of particular features or unable to use features that are not immediately obvious. A well-made user documentation guides the user through using the system and thus increases productivity . If the user documentation is simple, system implementation can happen faster because users require less training to learn how to use the new system. Components of end-user documentation \u00b6 Users expect the end-user documentation to include: FAQs Video tutorials Embedded assistance (for example, tooltips and dynamic page content) Support portals It usually includes: Minimum hardware and software requirements Installation guide How to start the system How to use different features of the system Screenshots explaining the main features of the system Example inputs and outputs Explanations of error messages and troubleshooting guides Information to contact the developer of the system if an undocumented question arises Types of end-user documentation \u00b6 Help files \u00b6 Files supplied together with the system. They can usually be called up with a button in the system. Advantages User-friendly (give general instructions on how to use the system and how to solve some major errors) Fast Easy to use (accessible at any time when using the program) Can be accessed offline Disadvantages Can only be used after the system has been installed (can\u2019t give any help when installing the solution) Might not be detailed (often only deal with very general errors) Might be hard to find (lack a search capability) (Even with search) the user might not know what to search for Online support \u00b6 Special web service hosted by the system\u2019s developer to provide user documentation. Advantages A larger amount of information Easier to update (continuously revised to deal with the problems occurring most often/FAQs) Can provide the option for live support (talking to a real human operator) Often have search capabilities built-in Can be accessed from any device Can be faster Disadvantages Can\u2019t be accessed offline/with a slow internet connection Live support does not work quite well with users unfamiliar with computers when they have to explain their problem Printed manuals \u00b6 Manuals printed on paper and supplied together with the system. Advantages Can be read through by users before starting to work with the new system Easy to find Work without a computer (always available) Give help installing the system Disadvantages Often limited to a little booklet supplying little information apart from how to install the system Slower Can be lost/misplaced/limited in number Harder to search Cannot be updated Prone to physical destruction Technical documentation \u00b6 Technical documentation addresses the system administrator\u2019s needs. Usually, this document contains information that will help in product maintenance, such as installation and updates. Technical documentation refers to the documentation that describes how a product or service operates. For example, software code documentation, technical specifications and API documentation. Technical documentation can also describe how to install the software. Components of technical documentation \u00b6 Descriptions of functions System admin guide User training \u00b6 Training end-users in using a new system is very important as productivity greatly depends on how familiar they are with a system. Effective user training is an essential part of introducing a new system. Types of user training \u00b6 Self-introduction \u00b6 Users can learn how to use a new system on their own , provided they have the right material to learn from. It can take the form of reading a manual or watching a tutorial. Advantages Low cost (only materials needed, no teachers/buildings) Flexible timeline Training tailored to exactly what users want to learn Disadvantages With no guidance, users might feel lost/overwhelmed Unstructured learning means certain features might be misunderstood/ignored Formal classes \u00b6 Users sit in a classroom and listen to an instructor who shows and explains how to use the system. This type of training is useful to train large amounts of staff as it is effective and relatively cheap, but if the size of the classes is too big, there is little time to deal with individual problems and questions. Advantages Structured learning environment Expert on hand to answer questions Curriculum designed to teach all aspects, including ones that might be misunderstood or difficult to grasp Disadvantages Expensive (teachers, buildings and facilities needed) Rigid schedule and curriculum Not much personalisation is possible Remote/Online training \u00b6 An instructor training one user or a small group of users by some kind of remote connection (Skype, Google Meet, Zoom, etc). This is the most effective way of training as training can be suited to users\u2019 needs and abilities while being instructed by a professional that caters to specific needs. Advantages Structured learning environment Expert on hand to answer questions Curriculum designed to teach all aspects, including ones that might be misunderstood or difficult to grasp Flexible locations Disadvantages Expensive (teachers & internet connection needed) Can feel \u2018remote\u2019 with no quick \u2018hands-on\u2019 Has to be computer-based","title":"03a User Focus"},{"location":"SLHL/03a/#03a-user-focus","text":"User documentation is any document that explains how to use the features and functions of a system to its end-users.","title":"03a User Focus"},{"location":"SLHL/03a/#end-user-documentation","text":"End-user documentation refers to the documentation for a product or service provided to the end users. The end-user documentation is designed to assist end users to use the product or service. This is often referred to as user assistance. The end-user documentation is a part of the overall product delivered to the customer. Attention The end-user documentation does not involve detailed explanations of how the system works - the users only need to know how to use the system. These guides need to be precise and easy to understand. In addition, well-written end-user documentation will help provide the best user experience. The quality of the user documentation can greatly affect the rate of implementation of (how fast users start using) the new system.","title":"End-user documentation"},{"location":"SLHL/03a/#importance-of-end-user-documentation","text":"Users can learn: how to use your software features of your software tips and tricks for your software how to resolve common problems with your software Without detailed, simple, clear instructions, users might be unaware of particular features or unable to use features that are not immediately obvious. A well-made user documentation guides the user through using the system and thus increases productivity . If the user documentation is simple, system implementation can happen faster because users require less training to learn how to use the new system.","title":"Importance of end-user documentation"},{"location":"SLHL/03a/#components-of-end-user-documentation","text":"Users expect the end-user documentation to include: FAQs Video tutorials Embedded assistance (for example, tooltips and dynamic page content) Support portals It usually includes: Minimum hardware and software requirements Installation guide How to start the system How to use different features of the system Screenshots explaining the main features of the system Example inputs and outputs Explanations of error messages and troubleshooting guides Information to contact the developer of the system if an undocumented question arises","title":"Components of end-user documentation"},{"location":"SLHL/03a/#types-of-end-user-documentation","text":"","title":"Types of end-user documentation"},{"location":"SLHL/03a/#help-files","text":"Files supplied together with the system. They can usually be called up with a button in the system. Advantages User-friendly (give general instructions on how to use the system and how to solve some major errors) Fast Easy to use (accessible at any time when using the program) Can be accessed offline Disadvantages Can only be used after the system has been installed (can\u2019t give any help when installing the solution) Might not be detailed (often only deal with very general errors) Might be hard to find (lack a search capability) (Even with search) the user might not know what to search for","title":"Help files"},{"location":"SLHL/03a/#online-support","text":"Special web service hosted by the system\u2019s developer to provide user documentation. Advantages A larger amount of information Easier to update (continuously revised to deal with the problems occurring most often/FAQs) Can provide the option for live support (talking to a real human operator) Often have search capabilities built-in Can be accessed from any device Can be faster Disadvantages Can\u2019t be accessed offline/with a slow internet connection Live support does not work quite well with users unfamiliar with computers when they have to explain their problem","title":"Online support"},{"location":"SLHL/03a/#printed-manuals","text":"Manuals printed on paper and supplied together with the system. Advantages Can be read through by users before starting to work with the new system Easy to find Work without a computer (always available) Give help installing the system Disadvantages Often limited to a little booklet supplying little information apart from how to install the system Slower Can be lost/misplaced/limited in number Harder to search Cannot be updated Prone to physical destruction","title":"Printed manuals"},{"location":"SLHL/03a/#technical-documentation","text":"Technical documentation addresses the system administrator\u2019s needs. Usually, this document contains information that will help in product maintenance, such as installation and updates. Technical documentation refers to the documentation that describes how a product or service operates. For example, software code documentation, technical specifications and API documentation. Technical documentation can also describe how to install the software.","title":"Technical documentation"},{"location":"SLHL/03a/#components-of-technical-documentation","text":"Descriptions of functions System admin guide","title":"Components of technical documentation"},{"location":"SLHL/03a/#user-training","text":"Training end-users in using a new system is very important as productivity greatly depends on how familiar they are with a system. Effective user training is an essential part of introducing a new system.","title":"User training"},{"location":"SLHL/03a/#types-of-user-training","text":"","title":"Types of user training"},{"location":"SLHL/03a/#self-introduction","text":"Users can learn how to use a new system on their own , provided they have the right material to learn from. It can take the form of reading a manual or watching a tutorial. Advantages Low cost (only materials needed, no teachers/buildings) Flexible timeline Training tailored to exactly what users want to learn Disadvantages With no guidance, users might feel lost/overwhelmed Unstructured learning means certain features might be misunderstood/ignored","title":"Self-introduction"},{"location":"SLHL/03a/#formal-classes","text":"Users sit in a classroom and listen to an instructor who shows and explains how to use the system. This type of training is useful to train large amounts of staff as it is effective and relatively cheap, but if the size of the classes is too big, there is little time to deal with individual problems and questions. Advantages Structured learning environment Expert on hand to answer questions Curriculum designed to teach all aspects, including ones that might be misunderstood or difficult to grasp Disadvantages Expensive (teachers, buildings and facilities needed) Rigid schedule and curriculum Not much personalisation is possible","title":"Formal classes"},{"location":"SLHL/03a/#remoteonline-training","text":"An instructor training one user or a small group of users by some kind of remote connection (Skype, Google Meet, Zoom, etc). This is the most effective way of training as training can be suited to users\u2019 needs and abilities while being instructed by a professional that caters to specific needs. Advantages Structured learning environment Expert on hand to answer questions Curriculum designed to teach all aspects, including ones that might be misunderstood or difficult to grasp Flexible locations Disadvantages Expensive (teachers & internet connection needed) Can feel \u2018remote\u2019 with no quick \u2018hands-on\u2019 Has to be computer-based","title":"Remote/Online training"}]}